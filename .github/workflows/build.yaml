deploy:
  needs: build
  runs-on: ubuntu-latest

  steps:
    - name: Download Built Artifact
      uses: actions/download-artifact@v4
      with:
        name: mule-artifact

    - name: Get Bearer Token
      id: auth
      env:
        ANYPOINT_USERNAME: ${{ secrets.ANYPOINT_PLATFORM_USERNAME }}
        ANYPOINT_PASSWORD: ${{ secrets.ANYPOINT_PLATFORM_PASSWORD }}
      run: |
        echo "Getting authentication token..."
        TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/login \
          -H "Content-Type: application/json" \
          -d "{\"username\":\"$ANYPOINT_USERNAME\",\"password\":\"$ANYPOINT_PASSWORD\"}" | jq -r '.access_token')
        
        if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
          echo "Failed to get authentication token"
          exit 1
        fi
        
        echo "‚úÖ Authentication successful"
        echo "::add-mask::$TOKEN"
        echo "token=$TOKEN" >> $GITHUB_OUTPUT

    - name: Get Environment ID
      id: env
      env:
        TOKEN: ${{ steps.auth.outputs.token }}
        ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
      run: |
        echo "Getting environment ID..."
        ENV_RESPONSE=$(curl -s -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/$ORG_ID/environments" \
          -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/json")
        
        ENV_ID=$(echo "$ENV_RESPONSE" | jq -r '.data[] | select(.name=="Sandbox") | .id')
        
        if [ -z "$ENV_ID" ]; then
          echo "Sandbox environment not found. Available environments:"
          echo "$ENV_RESPONSE" | jq -r '.data[] | .name'
          exit 1
        fi
        
        echo "‚úÖ Found environment: Sandbox ($ENV_ID)"
        echo "env_id=$ENV_ID" >> $GITHUB_OUTPUT

    - name: Get CloudHub 2.0 Shared Space Info (optional)
      id: space
      env:
        TOKEN: ${{ steps.auth.outputs.token }}
        ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
      run: |
        echo "Checking for CloudHub 2.0 shared spaces..."
        SPACES_RESPONSE=$(curl -s -o /dev/stdout -w "\n%{http_code}" -X GET \
          "https://anypoint.mulesoft.com/runtimefabric/api/organizations/$ORG_ID/sharedspaces" \
          -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/json")
        
        HTTP_CODE=$(echo "$SPACES_RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$SPACES_RESPONSE" | sed '$d')

        if [ "$HTTP_CODE" = "404" ]; then
          echo "No CloudHub 2.0 shared spaces found, assuming regular CloudHub"
          echo "space_id=" >> $GITHUB_OUTPUT
        else
          SPACE_ID=$(echo "$RESPONSE_BODY" | jq -r '.[] | select(.region | contains("us-east-2") or contains("ohio") or contains("Ohio")) | .id' | head -1)
          if [ -z "$SPACE_ID" ]; then
            SPACE_ID=$(echo "$RESPONSE_BODY" | jq -r '.[0].id')
          fi
          SPACE_NAME=$(echo "$RESPONSE_BODY" | jq -r ".[] | select(.id==\"$SPACE_ID\") | .name")
          echo "‚úÖ Using Shared Space: $SPACE_NAME ($SPACE_ID)"
          echo "space_id=$SPACE_ID" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to CloudHub
      env:
        TOKEN: ${{ steps.auth.outputs.token }}
        ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
        ENV_ID: ${{ steps.env.outputs.env_id }}
        SPACE_ID: ${{ steps.space.outputs.space_id }}
      run: |
        JAR_FILE=$(ls *.jar | head -1)
        APP_NAME="git-actions"

        echo "üì¶ Deploying Application: $APP_NAME"

        # If SPACE_ID is empty, deploy to regular CloudHub
        if [ -z "$SPACE_ID" ]; then
          echo "Deploying to regular CloudHub..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://anypoint.mulesoft.com/cloudhub/api/v2/applications" \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@$JAR_FILE" \
            -F "domain=$APP_NAME" \
            -F "environmentId=$ENV_ID")
        else
          echo "Deploying to CloudHub 2.0 Shared Space $SPACE_ID..."
          # Use your previous deployment.json approach here
          cat > deployment.json <<EOF
          {
            "name": "$APP_NAME",
            "target": {
              "provider": "MC",
              "targetId": "$SPACE_ID"
            }
          }
          EOF
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://anypoint.mulesoft.com/amc/application-manager/api/v2/organizations/$ORG_ID/environments/$ENV_ID/deployments" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-ANYPNT-ENV-ID: $ENV_ID" \
            -H "X-ANYPNT-ORG-ID: $ORG_ID" \
            -F "file=@$JAR_FILE" \
            -F "appInfoJson=@deployment.json;type=application/json")
        fi

        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
        
        echo "Response (HTTP $HTTP_CODE):"
        echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY"
        
        if [[ "$HTTP_CODE" =~ ^20[0-9]$ ]]; then
          echo "‚úÖ Deployment initiated successfully!"
        else
          echo "‚ùå Deployment failed with HTTP $HTTP_CODE"
          exit 1
        fi
 