name: Build and Deploy to CloudHub 2.0 Sandbox

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Build Mule Application
        run: mvn -B clean package --file pom.xml

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mule-artifact
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Built Artifact
        uses: actions/download-artifact@v4
        with:
          name: mule-artifact

      - name: Get Bearer Token
        id: auth
        env:
          ANYPOINT_USERNAME: ${{ secrets.ANYPOINT_PLATFORM_USERNAME }}
          ANYPOINT_PASSWORD: ${{ secrets.ANYPOINT_PLATFORM_PASSWORD }}
        run: |
          TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/login \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$ANYPOINT_USERNAME\",\"password\":\"$ANYPOINT_PASSWORD\"}" | jq -r '.access_token')
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Get Organization and Environment IDs
        id: ids
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
        run: |
          echo "Getting environment ID for SANDBOX..."
          ENV_ID=$(curl -s -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/$ORG_ID/environments" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" | jq -r '.data[] | select(.name=="SANDBOX") | .id')
          
          echo "Organization ID: $ORG_ID"
          echo "Environment ID: $ENV_ID"
          echo "env_id=$ENV_ID" >> $GITHUB_OUTPUT

      - name: Get Target ID
        id: target
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
          ENV_ID: ${{ steps.ids.outputs.env_id }}
        run: |
          echo "Getting available targets..."
          curl -s -X GET "https://anypoint.mulesoft.com/runtimefabric/api/organizations/$ORG_ID/environments/$ENV_ID/targets" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" | jq '.'
          
          TARGET_ID=$(curl -s -X GET "https://anypoint.mulesoft.com/runtimefabric/api/organizations/$ORG_ID/environments/$ENV_ID/targets" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" | jq -r '.[] | select(.name | contains("US-East") or contains("Ohio")) | .id' | head -1)
          
          echo "Target ID: $TARGET_ID"
          echo "target_id=$TARGET_ID" >> $GITHUB_OUTPUT

      - name: Deploy to CloudHub 2.0
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
          ENV_ID: ${{ steps.ids.outputs.env_id }}
          TARGET_ID: ${{ steps.target.outputs.target_id }}
        run: |
          JAR_FILE=$(ls *.jar | head -1)
          echo "=========================================="
          echo "Deploying: $JAR_FILE"
          echo "Organization: $ORG_ID"
          echo "Environment: $ENV_ID"
          echo "Target: $TARGET_ID"
          echo "=========================================="
          
          # Create deployment payload
          cat > deployment.json <<EOF
          {
            "name": "git-actions",
            "target": {
              "provider": "MC",
              "targetId": "$TARGET_ID",
              "deploymentSettings": {
                "resources": {
                  "cpu": {
                    "reserved": "100m",
                    "limit": "1000m"
                  },
                  "memory": {
                    "reserved": "700Mi",
                    "limit": "700Mi"
                  }
                },
                "http": {
                  "inbound": {
                    "publicUrl": "git-actions.usa-e2.cloudhub.io"
                  }
                },
                "clustered": false,
                "updateStrategy": "rolling",
                "forwardSslSession": false,
                "disableAmLogForwarding": false,
                "generateDefaultPublicUrl": true,
                "persistentObjectStore": false,
                "anypoint": {
                  "muleVersion": "4.6.0"
                }
              },
              "replicas": 1
            },
            "application": {
              "desiredState": "STARTED",
              "configuration": {
                "mule.agent.application.properties.service": {}
              },
              "vCores": "0.1",
              "integrations": {
                "services": {}
              }
            }
          }
          EOF
          
          # Upload JAR and deploy
          RESPONSE=$(curl -s -X POST \
            "https://anypoint.mulesoft.com/cloudhub/api/v2/applications" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-ANYPNT-ENV-ID: $ENV_ID" \
            -H "X-ANYPNT-ORG-ID: $ORG_ID" \
            -F "file=@$JAR_FILE" \
            -F "appInfoJson=@deployment.json")
          
          echo "$RESPONSE" | jq '.'
          
          if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
            echo "=========================================="
            echo "Deployment initiated successfully!"
            echo "=========================================="
          else
            echo "=========================================="
            echo "Deployment failed!"
            echo "=========================================="
            exit 1
          fi

      - name: Check Deployment Status
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
          ENV_ID: ${{ steps.ids.outputs.env_id }}
        run: |
          echo "Waiting 30 seconds for deployment to start..."
          sleep 30
          
          echo "=========================================="
          echo "Checking deployment status..."
          echo "=========================================="
          
          curl -s -X GET \
            "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/git-actions" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-ANYPNT-ENV-ID: $ENV_ID" \
            -H "X-ANYPNT-ORG-ID: $ORG_ID" | jq '.'