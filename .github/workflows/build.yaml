name: Build and Deploy to CloudHub 2.0 Sandbox

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Build Mule Application
        run: mvn -B clean package --file pom.xml

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mule-artifact
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Built Artifact
        uses: actions/download-artifact@v4
        with:
          name: mule-artifact

      - name: Get Bearer Token
        id: auth
        env:
          ANYPOINT_USERNAME: ${{ secrets.ANYPOINT_PLATFORM_USERNAME }}
          ANYPOINT_PASSWORD: ${{ secrets.ANYPOINT_PLATFORM_PASSWORD }}
        run: |
          echo "Getting authentication token..."
          TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/login \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$ANYPOINT_USERNAME\",\"password\":\"$ANYPOINT_PASSWORD\"}" | jq -r '.access_token')
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to get authentication token"
            exit 1
          fi
          
          echo "‚úÖ Authentication successful"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Get Environment ID
        id: env
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
        run: |
          echo "Getting environment ID..."
          ENV_RESPONSE=$(curl -s -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/$ORG_ID/environments" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json")
          
          ENV_ID=$(echo "$ENV_RESPONSE" | jq -r '.data[] | select(.name=="Sandbox") | .id')
          
          if [ -z "$ENV_ID" ]; then
            echo "Sandbox environment not found. Available environments:"
            echo "$ENV_RESPONSE" | jq -r '.data[] | .name'
            exit 1
          fi
          
          echo "‚úÖ Found environment: Sandbox ($ENV_ID)"
          echo "env_id=$ENV_ID" >> $GITHUB_OUTPUT

      - name: Get CloudHub 2.0 Shared Space Info
        id: space
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
          ENV_ID: ${{ steps.env.outputs.env_id }}
        run: |
          echo "Getting CloudHub 2.0 shared spaces..."
          
          # Get shared spaces (CloudHub 2.0 managed cloud)
          SPACES_RESPONSE=$(curl -s -X GET \
            "https://anypoint.mulesoft.com/runtimefabric/api/organizations/$ORG_ID/sharedspaces" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json")
          
          echo "Shared Spaces Response:"
          echo "$SPACES_RESPONSE" | jq '.'
          
          # Get the US East (Ohio) shared space
          SPACE_ID=$(echo "$SPACES_RESPONSE" | jq -r '.[] | select(.region | contains("us-east-2") or contains("ohio") or contains("Ohio")) | .id' | head -1)
          
          if [ -z "$SPACE_ID" ]; then
            echo "Trying alternative approach - getting all spaces..."
            SPACE_ID=$(echo "$SPACES_RESPONSE" | jq -r '.[0].id')
          fi
          
          if [ -z "$SPACE_ID" ]; then
            echo "‚ùå No CloudHub 2.0 shared space found"
            exit 1
          fi
          
          SPACE_NAME=$(echo "$SPACES_RESPONSE" | jq -r ".[] | select(.id==\"$SPACE_ID\") | .name")
          echo "‚úÖ Using Shared Space: $SPACE_NAME ($SPACE_ID)"
          echo "space_id=$SPACE_ID" >> $GITHUB_OUTPUT

      - name: Deploy to CloudHub 2.0
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
          ENV_ID: ${{ steps.env.outputs.env_id }}
          SPACE_ID: ${{ steps.space.outputs.space_id }}
        run: |
          JAR_FILE=$(ls *.jar | head -1)
          APP_NAME="git-actions"
          
          echo "=========================================="
          echo "üì¶ Deploying Application"
          echo "=========================================="
          echo "File: $JAR_FILE"
          echo "Name: $APP_NAME"
          echo "Space: $SPACE_ID"
          echo "Environment: $ENV_ID"
          echo "=========================================="
          
          # Create deployment configuration
          cat > deployment.json <<EOF
          {
            "name": "$APP_NAME",
            "target": {
              "provider": "MC",
              "targetId": "$SPACE_ID",
              "deploymentSettings": {
                "clustered": false,
                "enforceDeployingReplicasAcrossNodes": false,
                "http": {
                  "inbound": {
                    "publicUrl": "$APP_NAME.usa-e2.cloudhub.io"
                  }
                },
                "jvm": {},
                "resources": {
                  "cpu": {
                    "reserved": "20m",
                    "limit": "1000m"
                  },
                  "memory": {
                    "reserved": "700Mi",
                    "limit": "700Mi"
                  }
                },
                "updateStrategy": "rolling",
                "lastMileSecurity": false,
                "forwardSslSession": false,
                "generateDefaultPublicUrl": true,
                "disableAmLogForwarding": false,
                "persistentObjectStore": false,
                "anypoint": {
                  "muleVersion": "4.6.0",
                  "workerType": "MICRO"
                }
              },
              "replicas": 1
            },
            "application": {
              "desiredState": "STARTED",
              "configuration": {
                "mule.agent.application.properties.service": {}
              },
              "integrations": {
                "services": {
                  "objectStoreV2": {
                    "enabled": false
                  }
                }
              },
              "vCores": "0.1"
            }
          }
          EOF
          
          echo ""
          echo "Deployment Configuration:"
          cat deployment.json | jq '.'
          echo ""
          
          # Upload and deploy
          echo "Uploading application..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://anypoint.mulesoft.com/amc/application-manager/api/v2/organizations/$ORG_ID/environments/$ENV_ID/deployments" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-ANYPNT-ENV-ID: $ENV_ID" \
            -H "X-ANYPNT-ORG-ID: $ORG_ID" \
            -F "file=@$JAR_FILE" \
            -F "appInfoJson=@deployment.json;type=application/json")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo ""
          echo "Response (HTTP $HTTP_CODE):"
          echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY"
          echo ""
          
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "202" ]; then
            echo "=========================================="
            echo "‚úÖ Deployment initiated successfully!"
            echo "=========================================="
          else
            echo "=========================================="
            echo "‚ùå Deployment failed with HTTP $HTTP_CODE"
            echo "=========================================="
            exit 1
          fi

      - name: Monitor Deployment Status
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          ORG_ID: ${{ secrets.ANYPOINT_BUSINESS_GROUP_ID }}
          ENV_ID: ${{ steps.env.outputs.env_id }}
        run: |
          echo "‚è≥ Waiting 30 seconds for deployment to process..."
          sleep 30
          
          echo ""
          echo "=========================================="
          echo "üìä Checking Deployment Status"
          echo "=========================================="
          
          STATUS=$(curl -s -X GET \
            "https://anypoint.mulesoft.com/amc/application-manager/api/v2/organizations/$ORG_ID/environments/$ENV_ID/deployments" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-ANYPNT-ENV-ID: $ENV_ID" \
            -H "X-ANYPNT-ORG-ID: $ORG_ID")
          
          echo "$STATUS" | jq '.items[] | select(.name=="git-actions") | {name: .name, status: .status, desiredState: .application.desiredState, replicas: .target.replicas}'
          
          echo ""
          echo "=========================================="
          echo "‚úÖ Check Runtime Manager for full details"
          echo "URL: https://anypoint.mulesoft.com/cloudhub"
          echo "=========================================="